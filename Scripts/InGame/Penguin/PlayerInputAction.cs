//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/LastOfPenguinReMake/Scripts/InGame/Penguin/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Lop.Game
{
    public partial class @PlayerInputActionClass: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActionClass()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""7e9a172e-ada4-4592-b36b-10c6a8e701c3"",
            ""actions"": [
                {
                    ""name"": ""Slide"",
                    ""type"": ""Value"",
                    ""id"": ""93e4046a-7a9e-4b66-834d-c052e9f8299a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b6e14a31-0ed3-4bb3-be2a-565d0130b31f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpHold"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f605f1c6-3680-4f8c-a894-1564b4558855"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpDash"",
                    ""type"": ""Button"",
                    ""id"": ""7920f9fa-bc40-49e4-91eb-4839748606e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2e54390-9790-4014-a049-e6013037b6c1"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f36f4796-df7a-41aa-a0f1-051289e1b47e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3c1adc5-1320-4e43-9332-3e0271601cd3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91267826-98b2-4f73-8a8e-ca9713e05b00"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpDash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fever"",
            ""id"": ""29cdf951-9431-4c90-b725-9ef0f800a143"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d1029e69-21c2-46e5-943d-a01c8e7acd87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""c7d4c425-2dbb-4aae-aea3-d1c8afddd596"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TestStart"",
                    ""type"": ""Button"",
                    ""id"": ""8b904ac0-efe7-44d3-873f-623dd440938d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""721a3078-91c9-44ce-9a80-1d3ca1ba9639"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9db7e24c-71dc-4d8e-8f09-122838b17f8d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf66c8a3-5e78-4117-bfb7-835489b5e54d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Normal
            m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
            m_Normal_Slide = m_Normal.FindAction("Slide", throwIfNotFound: true);
            m_Normal_Jump = m_Normal.FindAction("Jump", throwIfNotFound: true);
            m_Normal_JumpHold = m_Normal.FindAction("JumpHold", throwIfNotFound: true);
            m_Normal_JumpDash = m_Normal.FindAction("JumpDash", throwIfNotFound: true);
            // Fever
            m_Fever = asset.FindActionMap("Fever", throwIfNotFound: true);
            m_Fever_Up = m_Fever.FindAction("Up", throwIfNotFound: true);
            m_Fever_Down = m_Fever.FindAction("Down", throwIfNotFound: true);
            m_Fever_TestStart = m_Fever.FindAction("TestStart", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Normal
        private readonly InputActionMap m_Normal;
        private List<INormalActions> m_NormalActionsCallbackInterfaces = new List<INormalActions>();
        private readonly InputAction m_Normal_Slide;
        private readonly InputAction m_Normal_Jump;
        private readonly InputAction m_Normal_JumpHold;
        private readonly InputAction m_Normal_JumpDash;
        public struct NormalActions
        {
            private @PlayerInputActionClass m_Wrapper;
            public NormalActions(@PlayerInputActionClass wrapper) { m_Wrapper = wrapper; }
            public InputAction @Slide => m_Wrapper.m_Normal_Slide;
            public InputAction @Jump => m_Wrapper.m_Normal_Jump;
            public InputAction @JumpHold => m_Wrapper.m_Normal_JumpHold;
            public InputAction @JumpDash => m_Wrapper.m_Normal_JumpDash;
            public InputActionMap Get() { return m_Wrapper.m_Normal; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
            public void AddCallbacks(INormalActions instance)
            {
                if (instance == null || m_Wrapper.m_NormalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NormalActionsCallbackInterfaces.Add(instance);
                @Slide.started += instance.OnSlide;
                @Slide.performed += instance.OnSlide;
                @Slide.canceled += instance.OnSlide;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @JumpHold.started += instance.OnJumpHold;
                @JumpHold.performed += instance.OnJumpHold;
                @JumpHold.canceled += instance.OnJumpHold;
                @JumpDash.started += instance.OnJumpDash;
                @JumpDash.performed += instance.OnJumpDash;
                @JumpDash.canceled += instance.OnJumpDash;
            }

            private void UnregisterCallbacks(INormalActions instance)
            {
                @Slide.started -= instance.OnSlide;
                @Slide.performed -= instance.OnSlide;
                @Slide.canceled -= instance.OnSlide;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @JumpHold.started -= instance.OnJumpHold;
                @JumpHold.performed -= instance.OnJumpHold;
                @JumpHold.canceled -= instance.OnJumpHold;
                @JumpDash.started -= instance.OnJumpDash;
                @JumpDash.performed -= instance.OnJumpDash;
                @JumpDash.canceled -= instance.OnJumpDash;
            }

            public void RemoveCallbacks(INormalActions instance)
            {
                if (m_Wrapper.m_NormalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INormalActions instance)
            {
                foreach (var item in m_Wrapper.m_NormalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NormalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NormalActions @Normal => new NormalActions(this);

        // Fever
        private readonly InputActionMap m_Fever;
        private List<IFeverActions> m_FeverActionsCallbackInterfaces = new List<IFeverActions>();
        private readonly InputAction m_Fever_Up;
        private readonly InputAction m_Fever_Down;
        private readonly InputAction m_Fever_TestStart;
        public struct FeverActions
        {
            private @PlayerInputActionClass m_Wrapper;
            public FeverActions(@PlayerInputActionClass wrapper) { m_Wrapper = wrapper; }
            public InputAction @Up => m_Wrapper.m_Fever_Up;
            public InputAction @Down => m_Wrapper.m_Fever_Down;
            public InputAction @TestStart => m_Wrapper.m_Fever_TestStart;
            public InputActionMap Get() { return m_Wrapper.m_Fever; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FeverActions set) { return set.Get(); }
            public void AddCallbacks(IFeverActions instance)
            {
                if (instance == null || m_Wrapper.m_FeverActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_FeverActionsCallbackInterfaces.Add(instance);
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @TestStart.started += instance.OnTestStart;
                @TestStart.performed += instance.OnTestStart;
                @TestStart.canceled += instance.OnTestStart;
            }

            private void UnregisterCallbacks(IFeverActions instance)
            {
                @Up.started -= instance.OnUp;
                @Up.performed -= instance.OnUp;
                @Up.canceled -= instance.OnUp;
                @Down.started -= instance.OnDown;
                @Down.performed -= instance.OnDown;
                @Down.canceled -= instance.OnDown;
                @TestStart.started -= instance.OnTestStart;
                @TestStart.performed -= instance.OnTestStart;
                @TestStart.canceled -= instance.OnTestStart;
            }

            public void RemoveCallbacks(IFeverActions instance)
            {
                if (m_Wrapper.m_FeverActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IFeverActions instance)
            {
                foreach (var item in m_Wrapper.m_FeverActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_FeverActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public FeverActions @Fever => new FeverActions(this);
        public interface INormalActions
        {
            void OnSlide(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnJumpHold(InputAction.CallbackContext context);
            void OnJumpDash(InputAction.CallbackContext context);
        }
        public interface IFeverActions
        {
            void OnUp(InputAction.CallbackContext context);
            void OnDown(InputAction.CallbackContext context);
            void OnTestStart(InputAction.CallbackContext context);
        }
    }
}
